#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef PINLAYOUT_SWIFT_H
#define PINLAYOUT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PinLayout",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC9PinLayout14ActiveWarnings")
@interface ActiveWarnings : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// UIViews’s anchor definition
SWIFT_PROTOCOL("_TtP9PinLayout6Anchor_")
@protocol Anchor
@end


/// UIViews’s list of anchors.
SWIFT_PROTOCOL("_TtP9PinLayout10AnchorList_")
@protocol AnchorList
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull topLeft;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull topCenter;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull topRight;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull centerLeft;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull center;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull centerRight;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull bottomLeft;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull bottomCenter;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull bottomRight;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull topStart;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull topEnd;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull centerStart;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull centerEnd;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull bottomStart;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull bottomEnd;
@end


@protocol VerticalEdge;
@protocol HorizontalEdge;

/// UIViews’s list of edges
SWIFT_PROTOCOL("_TtP9PinLayout8EdgeList_")
@protocol EdgeList
@property (nonatomic, readonly, strong) id <VerticalEdge> _Nonnull top;
@property (nonatomic, readonly, strong) id <VerticalEdge> _Nonnull vCenter;
@property (nonatomic, readonly, strong) id <VerticalEdge> _Nonnull bottom;
@property (nonatomic, readonly, strong) id <HorizontalEdge> _Nonnull left;
@property (nonatomic, readonly, strong) id <HorizontalEdge> _Nonnull hCenter;
@property (nonatomic, readonly, strong) id <HorizontalEdge> _Nonnull right;
@property (nonatomic, readonly, strong) id <HorizontalEdge> _Nonnull start;
@property (nonatomic, readonly, strong) id <HorizontalEdge> _Nonnull end;
@end

typedef SWIFT_ENUM(NSInteger, Fit, closed) {
  FitWidth = 0,
  FitHeight = 1,
  FitWidthFlexible = 2,
  FitHeightFlexible = 3,
  FitContent = 4,
};

/// Horizontal alignment used with relative positioning methods: above(of relativeView:, aligned:), below(of relativeView:, aligned:), …
/// <ul>
///   <li>
///     left: left aligned
///   </li>
///   <li>
///     center: center aligned
///   </li>
///   <li>
///     right: right aligned
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, HorizontalAlign, closed) {
/// The view’s left edge will be left-aligned with the relative view (or the left most view if a list of relative views is specified).
  HorizontalAlignLeft = 0,
/// The view’s will be horizontally centered with the relative view (or the average hCenter if a list of relative views is used).
  HorizontalAlignCenter = 1,
/// The view’s right edge will be right-aligned with the relative view (or the right most view if a list of relative views is specified).
  HorizontalAlignRight = 2,
/// No alignment will be applied.
  HorizontalAlignNone = 3,
/// In LTR direction, similar to using HorizontalAlignment.left.
/// In RTL direction, similar to using HorizontalAlignment.right.
  HorizontalAlignStart = 4,
/// In LTR direction, similar to using HorizontalAlignment.right.
/// In RTL direction, similar to using HorizontalAlignment.left.
  HorizontalAlignEnd = 5,
};


/// UIView’s horizontal edges (left/right) definition
SWIFT_PROTOCOL("_TtP9PinLayout14HorizontalEdge_")
@protocol HorizontalEdge
@end

typedef SWIFT_ENUM(NSInteger, LayoutDirection, closed) {
  LayoutDirectionAuto = 0,
  LayoutDirectionLtr = 1,
  LayoutDirectionRtl = 2,
};

enum PinSafeAreaInsetsDidChangeMode : NSInteger;
@class NSNumber;
@class NSString;

SWIFT_CLASS("_TtC9PinLayout3Pin")
@interface Pin : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum LayoutDirection layoutDirection;)
+ (enum LayoutDirection)layoutDirection SWIFT_WARN_UNUSED_RESULT;
+ (void)setLayoutDirection:(enum LayoutDirection)value;
/// Controls how PinLayout will calls <code>UIView.safeAreaInsetsDidChange</code> when the <code>UIView.pin.safeArea</code> change.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum PinSafeAreaInsetsDidChangeMode safeAreaInsetsDidChangeMode;)
+ (enum PinSafeAreaInsetsDidChangeMode)safeAreaInsetsDidChangeMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setSafeAreaInsetsDidChangeMode:(enum PinSafeAreaInsetsDidChangeMode)value;
+ (void)initPinLayout SWIFT_METHOD_FAMILY(none);
+ (void)layoutDirection:(enum LayoutDirection)direction;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL logWarnings;)
+ (BOOL)logWarnings SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogWarnings:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ActiveWarnings * _Nonnull activeWarnings;)
+ (ActiveWarnings * _Nonnull)activeWarnings SWIFT_WARN_UNUSED_RESULT;
+ (void)setActiveWarnings:(ActiveWarnings * _Nonnull)value;
/// If your codes need to work in Xcode playgrounds, you may set to <code>true</code> the property
/// <code>Pin.logMissingLayoutCalls</code>, this way any missing call to <code>layout()</code> will generate
/// a warning in the Xcode console..
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL logMissingLayoutCalls;)
+ (BOOL)logMissingLayoutCalls SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogMissingLayoutCalls:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable lastWarningText;)
+ (NSString * _Nullable)lastWarningText SWIFT_WARN_UNUSED_RESULT;
+ (void)setLastWarningText:(NSString * _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;
enum VerticalAlign : NSInteger;
enum WrapType : NSInteger;

/// We must have a different interface for objective-c. The PinLayout’s Swift interface use some
/// feature not available to objective-c, including overloading.
SWIFT_PROTOCOL("_TtP9PinLayout13PinLayoutObjC_")
@protocol PinLayoutObjC
@property (nonatomic, readonly) UIEdgeInsets safeArea;
/// With the Objective-C interface, you must call the "layout" method to ensure the view is layouted correctly.
/// Ex:
/// textLabel.pinObjc.top().left().layout()
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull layout)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull top)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topInsets)(UIEdgeInsets);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull left)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftInsets)(UIEdgeInsets);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottom)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomInsets)(UIEdgeInsets);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull right)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightInsets)(UIEdgeInsets);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull hCenter)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull hCenterValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull hCenterPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull vCenter)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull vCenterValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull vCenterPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull start)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull startValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull startPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull startInsets)(UIEdgeInsets);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull end)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull endValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull endPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull endInsets)(UIEdgeInsets);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull all)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull horizontally)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull vertically)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topToEdge)(id <VerticalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull vCenterToEdge)(id <VerticalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomToEdge)(id <VerticalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftToEdge)(id <HorizontalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull hCenterToEdge)(id <HorizontalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightToEdge)(id <HorizontalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull startToEdge)(id <HorizontalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull endToEdge)(id <HorizontalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topLeftToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topLeft)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topStartToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topStart)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topCenterToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topCenter)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topRightToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topRight)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topEndToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topEnd)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerLeftToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerLeft)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerStartToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerStart)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull center)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerRightToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerRight)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerEndToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerEnd)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomLeftToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomLeft)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomStartToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomStart)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomCenterToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomCenter)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomRightToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomRight)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomEndToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomEnd)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull aboveOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull aboveOfViews)(NSArray<UIView *> * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull aboveOfAligned)(UIView * _Nonnull, enum HorizontalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull aboveOfViewsAligned)(NSArray<UIView *> * _Nonnull, enum HorizontalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull belowOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull belowOfViews)(NSArray<UIView *> * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull belowOfAligned)(UIView * _Nonnull, enum HorizontalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull belowOfViewsAligned)(NSArray<UIView *> * _Nonnull, enum HorizontalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftOfViews)(NSArray<UIView *> * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftOfAligned)(UIView * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftOfViewsAligned)(NSArray<UIView *> * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightOfViews)(NSArray<UIView *> * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightOfAligned)(UIView * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightOfViewsAligned)(NSArray<UIView *> * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull beforeOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull beforeOfViews)(NSArray<UIView *> * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull beforeOfAligned)(UIView * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull beforeOfViewsAligned)(NSArray<UIView *> * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull afterOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull afterOfViews)(NSArray<UIView *> * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull afterOfAligned)(UIView * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull afterOfViewsAligned)(NSArray<UIView *> * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull justify)(enum HorizontalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull align)(enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull width)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull widthPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull widthOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull minWidth)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull minWidthPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull maxWidth)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull maxWidthPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull height)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull heightPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull heightOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull minHeight)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull minHeightPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull maxHeight)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull maxHeightPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull size)(CGSize);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull sizeLength)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull sizePercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull sizeOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull wrapContent)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull wrapContentPadding)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull wrapContentInsets)(UIEdgeInsets);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull wrapContentType)(enum WrapType);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull wrapContentTypePadding)(enum WrapType, CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull wrapContentTypeInsets)(enum WrapType, UIEdgeInsets);
/// Set the view aspect ratio.
/// AspectRatio is applied only if a single dimension (either width or height) can be determined,
/// in that case the aspect ratio will be used to compute the other dimension.
/// <ul>
///   <li>
///     AspectRatio is defined as the ratio between the width and the height (width / height).
///   </li>
///   <li>
///     An aspect ratio of 2 means the width is twice the size of the height.
///   </li>
///   <li>
///     AspectRatio respects the min (minWidth/minHeight) and the max (maxWidth/maxHeight)
///     dimensions of an item.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull aspectRatioValue)(CGFloat);
/// Set the view aspect ratio using another UIView’s aspect ratio.
/// AspectRatio is applied only if a single dimension (either width or height) can be determined,
/// in that case the aspect ratio will be used to compute the other dimension.
/// <ul>
///   <li>
///     AspectRatio is defined as the ratio between the width and the height (width / height).
///   </li>
///   <li>
///     AspectRatio respects the min (minWidth/minHeight) and the max (maxWidth/maxHeight)
///     dimensions of an item.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull aspectRatioOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull aspectRatio)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull sizeToFit)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull sizeToFitType)(enum Fit);
/// Set the top margin.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginTop)(CGFloat);
/// Set the left margin.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginLeft)(CGFloat);
/// Set the bottom margin.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginBottom)(CGFloat);
/// Set the right margin.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginRight)(CGFloat);
/// Set the start margin.
/// Depends on the value of <code>Pin.layoutDirection(...)</code>:
/// <ul>
///   <li>
///     In LTR direction, start margin specify the <em>left</em> margin.
///   </li>
///   <li>
///     In RTL direction, start margin specify the <em>right</em> margin.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginStart)(CGFloat);
/// Set the end margin.
/// Depends on the value of <code>Pin.layoutDirection(...)</code>:
/// <ul>
///   <li>
///     In LTR direction, end margin specify the <em>right</em> margin.
///   </li>
///   <li>
///     In RTL direction, end margin specify the <em>left</em> margin.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginEnd)(CGFloat);
/// Set the left, right, start and end margins to the specified value.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginHorizontal)(CGFloat);
/// Set the top and bottom margins to the specified value.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginVertical)(CGFloat);
/// Set all margins using UIEdgeInsets.
/// This method is particularly useful to set all margins using iOS 11 <code>UIView.safeAreaInsets</code>.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginInsets)(UIEdgeInsets);
/// Set all margins to the specified value.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull margin)(CGFloat);
/// Set individually vertical margins (top, bottom) and horizontal margins (left, right, start, end).
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginVH)(CGFloat, CGFloat);
/// Set individually top, horizontal margins and bottom margin.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginTHB)(CGFloat, CGFloat, CGFloat);
/// Set individually top, left, bottom and right margins.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginTLBR)(CGFloat, CGFloat, CGFloat, CGFloat);
/// Normally if only either left or right has been specified, PinLayout will MOVE the view to apply left or right margins.
/// This is also true even if the width has been set.
/// Calling pinEdges() will force PinLayout to pin the four edges and then apply left and/or right margins, and this without
/// moving the view.
///
/// returns:
/// PinLayout
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull pinEdges)(void);
@end

/// Control how PinLayout will calls <code>UIView.safeAreaInsetsDidChange</code> when the <code>UIView.pin.safeArea</code> change.
/// This support is usefull only on iOS 8/9/10. On iOS 11 <code>UIView.safeAreaInsetsDidChange</code> is supported
/// natively so this settings have no impact.
typedef SWIFT_ENUM(NSInteger, PinSafeAreaInsetsDidChangeMode, closed) {
/// PinLayout won’t call <code>UIView.safeAreaInsetsDidChange</code> on iOS 8/9/10.
  PinSafeAreaInsetsDidChangeModeDisable = 0,
/// PinLayout will call <code>UIView.safeAreaInsetsDidChange</code> only if the UIView implement the PinSafeAreaInsetsUpdate protocol.
  PinSafeAreaInsetsDidChangeModeOptIn = 1,
/// PinLayout will automatically calls <code>UIView.safeAreaInsetsDidChange</code> if the view has implemented this method.
  PinSafeAreaInsetsDidChangeModeAlways = 2,
};


@interface UIView (SWIFT_EXTENSION(PinLayout))
@property (nonatomic, readonly, strong) id <AnchorList> _Nonnull anchor;
@property (nonatomic, readonly, strong) id <EdgeList> _Nonnull edge;
@end




@interface UIView (SWIFT_EXTENSION(PinLayout))
@property (nonatomic, readonly, strong) id <PinLayoutObjC> _Nonnull pinObjc;
@end

/// Vertical alignment used with relative positioning methods: after(of relativeView:, aligned:), before(of relativeView:, aligned:), …
/// <ul>
///   <li>
///     top: top aligned
///   </li>
///   <li>
///     center: center aligned
///   </li>
///   <li>
///     bottom: bottom aligned
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, VerticalAlign, closed) {
/// The view’s top edge will be top-aligned with the relative view (or the top most view if a list of relative views is specified).
  VerticalAlignTop = 0,
/// The view’s will be vertically centered with the relative view (or the average vCenter if a list of relative views is used).
  VerticalAlignCenter = 1,
/// The view’s bottom edge will be bottom-aligned with the relative view (or the bottom most view if a list of relative views is specified).
  VerticalAlignBottom = 2,
/// No alignment will be applied.
  VerticalAlignNone = 3,
};


/// UIView’s vertical edges (top/bottom) definition
SWIFT_PROTOCOL("_TtP9PinLayout12VerticalEdge_")
@protocol VerticalEdge
@end

typedef SWIFT_ENUM(NSInteger, WrapType, closed) {
/// Adjust the view’s width AND height to wrap all its subviews.
  WrapTypeAll = 0,
/// Adjust only the view’s width to wrap all its subviews. The view’s height won’t be modified.
  WrapTypeHorizontally = 1,
/// Adjust only the view’s height to wrap all its subviews. The view’s width won’t be modified.
  WrapTypeVertically = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef PINLAYOUT_SWIFT_H
#define PINLAYOUT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PinLayout",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC9PinLayout14ActiveWarnings")
@interface ActiveWarnings : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// UIViews’s anchor definition
SWIFT_PROTOCOL("_TtP9PinLayout6Anchor_")
@protocol Anchor
@end


/// UIViews’s list of anchors.
SWIFT_PROTOCOL("_TtP9PinLayout10AnchorList_")
@protocol AnchorList
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull topLeft;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull topCenter;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull topRight;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull centerLeft;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull center;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull centerRight;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull bottomLeft;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull bottomCenter;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull bottomRight;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull topStart;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull topEnd;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull centerStart;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull centerEnd;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull bottomStart;
@property (nonatomic, readonly, strong) id <Anchor> _Nonnull bottomEnd;
@end


@protocol VerticalEdge;
@protocol HorizontalEdge;

/// UIViews’s list of edges
SWIFT_PROTOCOL("_TtP9PinLayout8EdgeList_")
@protocol EdgeList
@property (nonatomic, readonly, strong) id <VerticalEdge> _Nonnull top;
@property (nonatomic, readonly, strong) id <VerticalEdge> _Nonnull vCenter;
@property (nonatomic, readonly, strong) id <VerticalEdge> _Nonnull bottom;
@property (nonatomic, readonly, strong) id <HorizontalEdge> _Nonnull left;
@property (nonatomic, readonly, strong) id <HorizontalEdge> _Nonnull hCenter;
@property (nonatomic, readonly, strong) id <HorizontalEdge> _Nonnull right;
@property (nonatomic, readonly, strong) id <HorizontalEdge> _Nonnull start;
@property (nonatomic, readonly, strong) id <HorizontalEdge> _Nonnull end;
@end

typedef SWIFT_ENUM(NSInteger, Fit, closed) {
  FitWidth = 0,
  FitHeight = 1,
  FitWidthFlexible = 2,
  FitHeightFlexible = 3,
  FitContent = 4,
};

/// Horizontal alignment used with relative positioning methods: above(of relativeView:, aligned:), below(of relativeView:, aligned:), …
/// <ul>
///   <li>
///     left: left aligned
///   </li>
///   <li>
///     center: center aligned
///   </li>
///   <li>
///     right: right aligned
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, HorizontalAlign, closed) {
/// The view’s left edge will be left-aligned with the relative view (or the left most view if a list of relative views is specified).
  HorizontalAlignLeft = 0,
/// The view’s will be horizontally centered with the relative view (or the average hCenter if a list of relative views is used).
  HorizontalAlignCenter = 1,
/// The view’s right edge will be right-aligned with the relative view (or the right most view if a list of relative views is specified).
  HorizontalAlignRight = 2,
/// No alignment will be applied.
  HorizontalAlignNone = 3,
/// In LTR direction, similar to using HorizontalAlignment.left.
/// In RTL direction, similar to using HorizontalAlignment.right.
  HorizontalAlignStart = 4,
/// In LTR direction, similar to using HorizontalAlignment.right.
/// In RTL direction, similar to using HorizontalAlignment.left.
  HorizontalAlignEnd = 5,
};


/// UIView’s horizontal edges (left/right) definition
SWIFT_PROTOCOL("_TtP9PinLayout14HorizontalEdge_")
@protocol HorizontalEdge
@end

typedef SWIFT_ENUM(NSInteger, LayoutDirection, closed) {
  LayoutDirectionAuto = 0,
  LayoutDirectionLtr = 1,
  LayoutDirectionRtl = 2,
};

enum PinSafeAreaInsetsDidChangeMode : NSInteger;
@class NSNumber;
@class NSString;

SWIFT_CLASS("_TtC9PinLayout3Pin")
@interface Pin : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum LayoutDirection layoutDirection;)
+ (enum LayoutDirection)layoutDirection SWIFT_WARN_UNUSED_RESULT;
+ (void)setLayoutDirection:(enum LayoutDirection)value;
/// Controls how PinLayout will calls <code>UIView.safeAreaInsetsDidChange</code> when the <code>UIView.pin.safeArea</code> change.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum PinSafeAreaInsetsDidChangeMode safeAreaInsetsDidChangeMode;)
+ (enum PinSafeAreaInsetsDidChangeMode)safeAreaInsetsDidChangeMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setSafeAreaInsetsDidChangeMode:(enum PinSafeAreaInsetsDidChangeMode)value;
+ (void)initPinLayout SWIFT_METHOD_FAMILY(none);
+ (void)layoutDirection:(enum LayoutDirection)direction;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL logWarnings;)
+ (BOOL)logWarnings SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogWarnings:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ActiveWarnings * _Nonnull activeWarnings;)
+ (ActiveWarnings * _Nonnull)activeWarnings SWIFT_WARN_UNUSED_RESULT;
+ (void)setActiveWarnings:(ActiveWarnings * _Nonnull)value;
/// If your codes need to work in Xcode playgrounds, you may set to <code>true</code> the property
/// <code>Pin.logMissingLayoutCalls</code>, this way any missing call to <code>layout()</code> will generate
/// a warning in the Xcode console..
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL logMissingLayoutCalls;)
+ (BOOL)logMissingLayoutCalls SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogMissingLayoutCalls:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable lastWarningText;)
+ (NSString * _Nullable)lastWarningText SWIFT_WARN_UNUSED_RESULT;
+ (void)setLastWarningText:(NSString * _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;
enum VerticalAlign : NSInteger;
enum WrapType : NSInteger;

/// We must have a different interface for objective-c. The PinLayout’s Swift interface use some
/// feature not available to objective-c, including overloading.
SWIFT_PROTOCOL("_TtP9PinLayout13PinLayoutObjC_")
@protocol PinLayoutObjC
@property (nonatomic, readonly) UIEdgeInsets safeArea;
/// With the Objective-C interface, you must call the "layout" method to ensure the view is layouted correctly.
/// Ex:
/// textLabel.pinObjc.top().left().layout()
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull layout)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull top)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topInsets)(UIEdgeInsets);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull left)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftInsets)(UIEdgeInsets);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottom)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomInsets)(UIEdgeInsets);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull right)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightInsets)(UIEdgeInsets);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull hCenter)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull hCenterValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull hCenterPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull vCenter)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull vCenterValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull vCenterPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull start)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull startValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull startPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull startInsets)(UIEdgeInsets);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull end)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull endValue)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull endPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull endInsets)(UIEdgeInsets);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull all)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull horizontally)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull vertically)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topToEdge)(id <VerticalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull vCenterToEdge)(id <VerticalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomToEdge)(id <VerticalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftToEdge)(id <HorizontalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull hCenterToEdge)(id <HorizontalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightToEdge)(id <HorizontalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull startToEdge)(id <HorizontalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull endToEdge)(id <HorizontalEdge> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topLeftToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topLeft)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topStartToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topStart)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topCenterToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topCenter)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topRightToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topRight)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topEndToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull topEnd)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerLeftToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerLeft)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerStartToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerStart)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull center)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerRightToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerRight)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerEndToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull centerEnd)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomLeftToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomLeft)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomStartToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomStart)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomCenterToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomCenter)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomRightToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomRight)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomEndToAnchor)(id <Anchor> _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull bottomEnd)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull aboveOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull aboveOfViews)(NSArray<UIView *> * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull aboveOfAligned)(UIView * _Nonnull, enum HorizontalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull aboveOfViewsAligned)(NSArray<UIView *> * _Nonnull, enum HorizontalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull belowOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull belowOfViews)(NSArray<UIView *> * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull belowOfAligned)(UIView * _Nonnull, enum HorizontalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull belowOfViewsAligned)(NSArray<UIView *> * _Nonnull, enum HorizontalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftOfViews)(NSArray<UIView *> * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftOfAligned)(UIView * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull leftOfViewsAligned)(NSArray<UIView *> * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightOfViews)(NSArray<UIView *> * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightOfAligned)(UIView * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull rightOfViewsAligned)(NSArray<UIView *> * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull beforeOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull beforeOfViews)(NSArray<UIView *> * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull beforeOfAligned)(UIView * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull beforeOfViewsAligned)(NSArray<UIView *> * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull afterOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull afterOfViews)(NSArray<UIView *> * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull afterOfAligned)(UIView * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull afterOfViewsAligned)(NSArray<UIView *> * _Nonnull, enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull justify)(enum HorizontalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull align)(enum VerticalAlign);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull width)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull widthPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull widthOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull minWidth)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull minWidthPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull maxWidth)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull maxWidthPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull height)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull heightPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull heightOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull minHeight)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull minHeightPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull maxHeight)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull maxHeightPercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull size)(CGSize);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull sizeLength)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull sizePercent)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull sizeOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull wrapContent)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull wrapContentPadding)(CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull wrapContentInsets)(UIEdgeInsets);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull wrapContentType)(enum WrapType);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull wrapContentTypePadding)(enum WrapType, CGFloat);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull wrapContentTypeInsets)(enum WrapType, UIEdgeInsets);
/// Set the view aspect ratio.
/// AspectRatio is applied only if a single dimension (either width or height) can be determined,
/// in that case the aspect ratio will be used to compute the other dimension.
/// <ul>
///   <li>
///     AspectRatio is defined as the ratio between the width and the height (width / height).
///   </li>
///   <li>
///     An aspect ratio of 2 means the width is twice the size of the height.
///   </li>
///   <li>
///     AspectRatio respects the min (minWidth/minHeight) and the max (maxWidth/maxHeight)
///     dimensions of an item.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull aspectRatioValue)(CGFloat);
/// Set the view aspect ratio using another UIView’s aspect ratio.
/// AspectRatio is applied only if a single dimension (either width or height) can be determined,
/// in that case the aspect ratio will be used to compute the other dimension.
/// <ul>
///   <li>
///     AspectRatio is defined as the ratio between the width and the height (width / height).
///   </li>
///   <li>
///     AspectRatio respects the min (minWidth/minHeight) and the max (maxWidth/maxHeight)
///     dimensions of an item.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull aspectRatioOf)(UIView * _Nonnull);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull aspectRatio)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull sizeToFit)(void);
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull sizeToFitType)(enum Fit);
/// Set the top margin.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginTop)(CGFloat);
/// Set the left margin.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginLeft)(CGFloat);
/// Set the bottom margin.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginBottom)(CGFloat);
/// Set the right margin.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginRight)(CGFloat);
/// Set the start margin.
/// Depends on the value of <code>Pin.layoutDirection(...)</code>:
/// <ul>
///   <li>
///     In LTR direction, start margin specify the <em>left</em> margin.
///   </li>
///   <li>
///     In RTL direction, start margin specify the <em>right</em> margin.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginStart)(CGFloat);
/// Set the end margin.
/// Depends on the value of <code>Pin.layoutDirection(...)</code>:
/// <ul>
///   <li>
///     In LTR direction, end margin specify the <em>right</em> margin.
///   </li>
///   <li>
///     In RTL direction, end margin specify the <em>left</em> margin.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginEnd)(CGFloat);
/// Set the left, right, start and end margins to the specified value.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginHorizontal)(CGFloat);
/// Set the top and bottom margins to the specified value.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginVertical)(CGFloat);
/// Set all margins using UIEdgeInsets.
/// This method is particularly useful to set all margins using iOS 11 <code>UIView.safeAreaInsets</code>.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginInsets)(UIEdgeInsets);
/// Set all margins to the specified value.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull margin)(CGFloat);
/// Set individually vertical margins (top, bottom) and horizontal margins (left, right, start, end).
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginVH)(CGFloat, CGFloat);
/// Set individually top, horizontal margins and bottom margin.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginTHB)(CGFloat, CGFloat, CGFloat);
/// Set individually top, left, bottom and right margins.
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull marginTLBR)(CGFloat, CGFloat, CGFloat, CGFloat);
/// Normally if only either left or right has been specified, PinLayout will MOVE the view to apply left or right margins.
/// This is also true even if the width has been set.
/// Calling pinEdges() will force PinLayout to pin the four edges and then apply left and/or right margins, and this without
/// moving the view.
///
/// returns:
/// PinLayout
@property (nonatomic, readonly, copy) id <PinLayoutObjC> _Nullable (^ _Nonnull pinEdges)(void);
@end

/// Control how PinLayout will calls <code>UIView.safeAreaInsetsDidChange</code> when the <code>UIView.pin.safeArea</code> change.
/// This support is usefull only on iOS 8/9/10. On iOS 11 <code>UIView.safeAreaInsetsDidChange</code> is supported
/// natively so this settings have no impact.
typedef SWIFT_ENUM(NSInteger, PinSafeAreaInsetsDidChangeMode, closed) {
/// PinLayout won’t call <code>UIView.safeAreaInsetsDidChange</code> on iOS 8/9/10.
  PinSafeAreaInsetsDidChangeModeDisable = 0,
/// PinLayout will call <code>UIView.safeAreaInsetsDidChange</code> only if the UIView implement the PinSafeAreaInsetsUpdate protocol.
  PinSafeAreaInsetsDidChangeModeOptIn = 1,
/// PinLayout will automatically calls <code>UIView.safeAreaInsetsDidChange</code> if the view has implemented this method.
  PinSafeAreaInsetsDidChangeModeAlways = 2,
};


@interface UIView (SWIFT_EXTENSION(PinLayout))
@property (nonatomic, readonly, strong) id <AnchorList> _Nonnull anchor;
@property (nonatomic, readonly, strong) id <EdgeList> _Nonnull edge;
@end




@interface UIView (SWIFT_EXTENSION(PinLayout))
@property (nonatomic, readonly, strong) id <PinLayoutObjC> _Nonnull pinObjc;
@end

/// Vertical alignment used with relative positioning methods: after(of relativeView:, aligned:), before(of relativeView:, aligned:), …
/// <ul>
///   <li>
///     top: top aligned
///   </li>
///   <li>
///     center: center aligned
///   </li>
///   <li>
///     bottom: bottom aligned
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, VerticalAlign, closed) {
/// The view’s top edge will be top-aligned with the relative view (or the top most view if a list of relative views is specified).
  VerticalAlignTop = 0,
/// The view’s will be vertically centered with the relative view (or the average vCenter if a list of relative views is used).
  VerticalAlignCenter = 1,
/// The view’s bottom edge will be bottom-aligned with the relative view (or the bottom most view if a list of relative views is specified).
  VerticalAlignBottom = 2,
/// No alignment will be applied.
  VerticalAlignNone = 3,
};


/// UIView’s vertical edges (top/bottom) definition
SWIFT_PROTOCOL("_TtP9PinLayout12VerticalEdge_")
@protocol VerticalEdge
@end

typedef SWIFT_ENUM(NSInteger, WrapType, closed) {
/// Adjust the view’s width AND height to wrap all its subviews.
  WrapTypeAll = 0,
/// Adjust only the view’s width to wrap all its subviews. The view’s height won’t be modified.
  WrapTypeHorizontally = 1,
/// Adjust only the view’s height to wrap all its subviews. The view’s width won’t be modified.
  WrapTypeVertically = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
